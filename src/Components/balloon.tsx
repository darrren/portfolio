/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect, useState } from "react";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import * as THREE from "three";
import gsap from "gsap";
import DraggableRigidBody, { DraggableRigidBodyProps } from "@/Components/DraggableRigidBody";

export function Model(props: any) {
  const ref = useRef<any>();
  const { nodes, materials } = useGLTF("../balloon.glb");
  const [dragging, setDragging] = useState(false);
  const [s] = useState<{ mouse: { x: number; y: number } | null }>({
    mouse: null,
  });
  const draggableRigidBodyProps: Partial<DraggableRigidBodyProps> = {
    rigidBodyProps: {
      gravityScale: 3.5,
      linearDamping: 0,
      angularDamping: 0,
      includeInvisible: true,
    },
    // boundingBox: [
    //   [-8, 8],
    //   [0.5, 8],
    //   [-8, 8],
    // ],
    dragControlsProps: {
      preventOverlap: true,
    },
  };

  useEffect(() => {
    if (dragging) {
      document.body.style.cursor = "grabbing";
    } else {
      document.body.style.cursor = "";
      s.mouse = null;
    }
  }, [dragging]);

  useEffect(() => {
    setTimeout(() => {
      ref.current?.children.map((e: any, i: any) => {
        // console.log(e.children[0].children[0].material.visible);
        e.children[0].children[0].visible = true;
        gsap.fromTo(
          e.scale,
          { x: 0.01, y: 0.01, z: 0.01 },
          {
            x: 1,
            y: 1,
            z: 1,
            duration: 0.7,
            ease: "back.out(3)",
            delay: 0.15 * i,
          }
        );
      });
    }, 1000);

    const handleMouseUp = () => {
      setDragging(false);
    };
    window.addEventListener("pointerup", handleMouseUp);

    return () => {
      window.removeEventListener("pointerup", handleMouseUp);
    };
  }, []);

  return (
    <>
      <group ref={ref} {...props} dispose={null}>
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [-1.11, 0.294, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.H as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[-1.11, 0.294, -0.11]}
              rotation={[1.929, 0, -0.342]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            ></mesh>
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [-0.587, 0.289, 0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.E as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[-0.587, 0.289, -0.11]}
              rotation={[1.438, 0.122, 0.22]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />

        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [-0.181, 0.255, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.L001 as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[-0.181, 0.255, -0.11]}
              rotation={[1.293, -0.032, -0.199]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [0.282, 0.256, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.L002 as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[0.282, 0.256, -0.11]}
              rotation={[1.502, 0.277, 0.541]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [0.829, 0.291, -0.41],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.O001 as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[0.829, 0.291, -0.11]}
              rotation={[1.907, -0.043, 0.282]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [1.161, 0.136, -0.147],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes["!"] as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[1.161, 0.136, -0.147]}
              rotation={[1.877, -0.503, -0.095]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [1.297, 0.37, -0.073],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes["!001"] as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[1.297, 0.37, -0.073]}
              rotation={[1.877, -0.503, -0.095]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [-1.048, -0.361, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.W as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[-1.048, -0.361, -0.11]}
              rotation={[1.254, 0.151, 0.291]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [-0.43, -0.358, 0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.O as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[-0.43, -0.358, -0.11]}
              rotation={[1.188, -0.062, -0.368]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [0.094, -0.365, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.R as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[0.094, -0.365, -0.11]}
              rotation={[1.749, 0.201, 0.354]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [0.559, -0.393, 0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.L as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[0.559, -0.393, -0.11]}
              rotation={[1.638, -0.245, 0.106]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
        <DraggableRigidBody
          {...draggableRigidBodyProps}
          groupProps={{
            position: [1.05, -0.359, -0.11],
          }}
          visibleMesh={
            <mesh
              visible={false}
              castShadow
              receiveShadow
              geometry={(nodes.D as THREE.Mesh).geometry}
              material={materials["Material.001"]}
              // position={[1.05, -0.359, -0.11]}
              rotation={[1.058, -0.143, 0.247]}
              onPointerOver={() => (document.body.style.cursor = "grab")}
              onPointerOut={() => (document.body.style.cursor = "")}
            />
          }
        />
      </group>
    </>
  );
}

useGLTF.preload("../balloon.glb");
